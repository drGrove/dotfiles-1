#!/bin/bash

# Configuration #
install=false # true to boot with install media
driver_iso="$HOME/Disks/virtio.iso"
install_iso="$HOME/Disks/Win10.iso"
sound_type="none" # 'none' for USB DAC. 'pulseaudio' or 'alsa' to share
gpu_type="nvidia"
guest_mem="8G"
gpu_mem="6G"
disk="/dev/sda" # path to physical disk, or raw disk file
tap_device="none" # 'none' for default sharing or dev like 'tap0' for for tap
pciid_vc_gpu="01:00.0" # PCI-ID of Video Card GPU
pciid_vc_snd="01:00.1" # PCI-ID of Video Card Integrated Sound
pciid_usb="00:14.0" # PCI-ID of isolated USB Controller
qemu_bin=qemu-system-x86_64
ovmf_dir="/usr/share/edk2.git/ovmf-x64"
#   Grab OVMF binaries from https://www.kraxel.org/repos/jenkins/edk2/)
#   rpmextract edk2.git-ovmf-x64-0-20150223.b877.ga8577b3.noarch.rpm
#   cp -R ./usr/share/* /usr/share

# Qemu arg/env helpers
qemu_opts=""
function qemu_opt() {
	for arg in $@; do
		qemu_opts+="${arg} "
	done
}
qemu_envs=""
function qemu_env() {
	for arg in $@; do
		qemu_envs+="${arg} "
	done
}

# Hypervisor
qemu_opt "-enable-kvm"

# Chipset
qemu_opt "-machine type=q35,accel=kvm" # Q35 is a fairly generic chipset

# CPU
if [[ "$gpu_type" = "nvidia" ]]; then
	# Nvidia cards do not support kvm on cpu or hyper-v enlightenments
	qemu_opt "-cpu host,kvm=off"
else
	# everyone else gets all the goodies
	qemu_opt "-cpu host,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time"
fi
qemu_opt "-smp 8,sockets=1,cores=4,threads=2"

# Memory
hugepage_size=$(grep Hugepagesize /proc/meminfo | awk '{ print $2}')
hugepages=$((((${gpu_mem%?} + ${guest_mem%?}) * 1024) / 2))
sudo sysctl -w vm.nr_hugepages=$hugepages
qemu_opt "-m $guest_mem"
qemu_opt "-mem-path /dev/hugepages"

# Disk
qemu_opt "-device virtio-scsi-pci,id=scsi"
qemu_opt "-drive file=${disk},id=disk,format=raw,if=none"
qemu_opt "-device scsi-hd,drive=disk"

# Video
ovmf_vars=$(mktemp)
cp $ovmf_dir/OVMF_VARS-pure-efi.fd $ovmf_vars
qemu_opt "-device vfio-pci,host=$pciid_vc_gpu,multifunction=on,x-vga=on"
qemu_opt "-device vfio-pci,host=$pciid_vc_snd"
qemu_opt "-drive if=pflash,format=raw,readonly,file=$ovmf_dir/OVMF_CODE-pure-efi.fd"
qemu_opt "-drive if=pflash,format=raw,file=$ovmf_vars"
qemu_opt "-nographic -vga none" # Headless on host

# Sound
if [[ "$sound_type" = "pulseaudio" ]]; then
	qemu_opt "-soundhw hda"
	qemu_env "QEMU_AUDIO_DRV=pa"
	qemu_env "QEMU_PA_SOURCE=input"
	qemu_env "QEMU_PA_SAMPLES=4096"
	qemu_env "QEMU_PA_SINK=alsa_output.pci-0000_00_1f.3.analog-stereo"
elif [[ "$sound_type" = "alsa" ]]; then
	qemu_opt "-soundhw ac97"
	qemu_env "QEMU_AUDIO_DRV=alsa"
else
	echo "Sound passthrough disabled. Supply own USB DAC"
fi

# USB
qemu_opt "-usb"
qemu_opt "-device vfio-pci,host=$pciid_usb"

# Clock
qemu_opt "-rtc clock=host,base=utc"

# Network
if [[ "$tap_device" != "none" ]]; then
	qemu_opt "-net nic,model=virtio -net tap,ifname=$tap_device,script=no,downscript=no"
fi

# OS Install
if [[ "$install" = "true" ]]; then
	qemu_opt "-drive file=$driver_iso,id=virtiocd,if=none"
	qemu_opt "-device ide-cd,bus=ide.1,drive=virtiocd"
	qemu_opt "-cdrom $install_iso"
	qemu_opt "-boot d"
fi

# Boot VM
# 	Warning: Currently running as root. Solutions for user-mode exist.
# 	See: http://www.evonide.com/non-root-gpu-passthrough-setup/
echo "${qemu_envs} ${qemu_bin} ${qemu_opts} $*"
eval "sudo ${qemu_envs} ${qemu_bin} ${qemu_opts} $*"

# Cleanup
echo Removing $hugepages hugepages
new_hugepages=$(($(cat /proc/sys/vm/nr_hugepages) - ${hugepages}))
sudo sysctl -w vm.nr_hugepages=$new_hugepages
